<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.EntityClient" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="CodeCharm.Data.AuditFramework" #>
<#@ import namespace="CodeCharm.Entity.AuditFramework" #>

<# 
string currentVersionTrackIdName = _currentTrackingTable.ToString() + "ºTrackºId";
bool first;

SchemaDataSet schemaDataSet = _params.SchemaDataSet;
SchemaDataSet.SchemaPrimaryKeysDataTable primaryKeysTable = schemaDataSet.SchemaPrimaryKeys;
EnumerableRowCollection<SchemaDataSet.SchemaPrimaryKeysRow> primaryKeysRows = primaryKeysTable.AsEnumerable();
var primaryKeysQuery = from primaryKeysRow in primaryKeysRows
                       where primaryKeysRow.TABLE_SCHEMA.Equals(_schema, StringComparison.OrdinalIgnoreCase)
                       where primaryKeysRow.TABLE_NAME.Equals(_tableName, StringComparison.OrdinalIgnoreCase)
                       select primaryKeysRow;                   


#>
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[<#= _params.AuditingSchema #>].[Deltaº<#= _priorTrackingTable.ToString() #>]') AND type IN (N'P', N'PC'))
    DROP PROCEDURE [<#= _params.AuditingSchema #>].[Deltaº<#= _priorTrackingTable.ToString() #>];
GO

CREATE PROCEDURE [<#= _params.AuditingSchema #>].[Deltaº<#= _priorTrackingTable.ToString() #>]
  @<#= currentVersionTrackIdName #>     [BIGINT]
, @PriorºTrackId    [BIGINT] = NULL OUTPUT
, @AnyDelta 		[BIT] = 0 OUTPUT
<#
foreach(SchemaDataSet.SchemaPrimaryKeysRow primaryKeysRow in primaryKeysQuery)
{   #>
, @PKº<#= primaryKeysRow.COLUMN_NAME #> <#= SchemaHelper.DataTypeWithDetail(primaryKeysRow, schemaDataSet.Columns) #>
<#
}	#>
AS

/*
    READ THIS BEFORE EDITING THIS CODE
    ----------------------------------
    This code was automatically generated by the
    CodeCharm.Model.AuditFramework
    project.
    
    If you modify this code, and then execute 
    the AuditFramework tool, your modifications
    will be ignored and overwritten.
    
    Template: CreateUpdateDeltaPriorTableProcedure.tt
    
    REMARKS
    -------
    This procedure is not meant to be called by users or applications
    directly. It is only meant to be called by other Delta* procedures.
    
    This procedure creates a Delta record (in the tables with the Δ symbol).
    A Delta record contains a bitmask showing which fields have 
    changed since the last recorded values of the fields.
    
    This procedure must compare the current track record, using the current schema 
    version, against an earlier schema versions. Where the schema
    has mismatched fields (a field exists in the current version of the schema 
    but not the earlier), the missing field is treated as a NULL and compared 
    against the existing field. If a field exists in an earlier version but not
	the current version, it is ignored (there is no place to store the bit).
*/

	SET NOCOUNT ON;
	
    -- Find the TrackId of the most recent track/delta record (has PriorTrackId) in the current tracking table that matches the primary keys of this entry

    SELECT    TOP 1 @PriorºTrackId = [M].[TrackºId]
        FROM    [<#= _params.AuditingSchema #>].[<#= _priorTrackingTable.ToString() #>] AS [T]
            INNER JOIN  [<#= _params.AuditingSchema #>].[AuditMaster] AS [M]
                    ON  [M].[TrackºId] = [T].[TrackºId]
        WHERE   [M].[TrackºId] < @<#= currentVersionTrackIdName #>
<# 
foreach (SchemaDataSet.SchemaPrimaryKeysRow primaryKeysRow in primaryKeysQuery)
{   #>
            AND [T].[<#= primaryKeysRow.COLUMN_NAME #>] = @PKº<#= primaryKeysRow.COLUMN_NAME #>
<#
}   #>
        ORDER BY    [M].[TrackºId] DESC;

    -- Exit quickly if we did not find the earlier version in this version of the tracking table
    IF (@PriorºTrackId IS NULL)
        RETURN;

    -- Compare fields of that track record to the current track record and create the delta record
        
    -- Variables to store values for comparison
<# 
foreach (SchemaDataSet.ColumnsRow targetColumn in _targetTableColumns)
{   #>
    DECLARE       @<#= targetColumn.COLUMN_NAME #> <#= SchemaHelper.DataTypeAsVariable(targetColumn) #>;
    DECLARE @Priorº<#= targetColumn.COLUMN_NAME #> <#= SchemaHelper.DataTypeAsVariable(targetColumn) #>;
    DECLARE @Deltaº<#= targetColumn.COLUMN_NAME #> [BIT];
        
<#
}   #>  
    
    -- Get the values of the current record
    SELECT
<#
first = true;
PushIndent("            ");
foreach(SchemaDataSet.ColumnsRow targetColumn in _targetTableColumns)
{
    Write(first ? "  " : ", ");
    WriteLine("@" + targetColumn.COLUMN_NAME + " = [" + targetColumn.COLUMN_NAME + "]");
    first = false;
}
PopIndent();
#>
        FROM    <#= _currentTrackingTable.ToString() #>
        WHERE   [TrackºId] = @<#= currentVersionTrackIdName #>;

    -- Get Prior values for comparison (only those that are in the current schema)
    SELECT
<# 
List<string> priorTableColumnsList = (from column in schemaDataSet.Columns
                                      where column.TABLE_SCHEMA.Equals(_params.AuditingSchema, StringComparison.OrdinalIgnoreCase)
                                      where column.TABLE_NAME.Equals(_priorTrackingTable.ToString(), StringComparison.OrdinalIgnoreCase)
                                      select column.COLUMN_NAME).ToList();

first = true;
PushIndent("            ");
foreach(SchemaDataSet.ColumnsRow targetColumn in _targetTableColumns)
{
	if (priorTableColumnsList.Contains(targetColumn.COLUMN_NAME, StringComparer.OrdinalIgnoreCase))
    {
		Write(first ? "  " : ", ");
    	WriteLine("@Priorº" + targetColumn.COLUMN_NAME + " = [" + targetColumn.COLUMN_NAME + "]");
    	first = false;
	}
}
PopIndent();
#>
        FROM    <#= _priorTrackingTable.ToString() #>
        WHERE   [TrackºId] = @PriorºTrackId;
        
    -- Set Delta bits
<# 
foreach (SchemaDataSet.ColumnsRow targetColumn in _targetTableColumns)
{   #>
    SET @Deltaº<#= targetColumn.COLUMN_NAME #> = CASE WHEN (@<#= targetColumn.COLUMN_NAME #> IS NULL AND @Priorº<#= targetColumn.COLUMN_NAME #> IS NULL) OR (@<#= targetColumn.COLUMN_NAME #> = @Priorº<#= targetColumn.COLUMN_NAME #><#= SchemaHelper.IsStringDataType(targetColumn) ? " COLLATE Latin1_General_BIN" : string.Empty #> ) THEN 0 ELSE 1 END;
	SET @AnyDelta = CONVERT(BIT, CONVERT(INT, @AnyDelta) | CONVERT(INT, @Deltaº<#= targetColumn.COLUMN_NAME #>));
	
<#
}   #>

    -- Set bits for record with current version schema
    INSERT  [<#= _params.AuditingSchema #>].[<#= _currentTrackingTable.ToString() #>Δ]
        (
          [TrackºId]
<# foreach(SchemaDataSet.ColumnsRow targetColumn in _targetTableColumns)
{   #>
        , [<#= targetColumn.COLUMN_NAME #>]
<#
}   #>
        )
        VALUES
        (
          @<#= currentVersionTrackIdName #>               
<# 
foreach (SchemaDataSet.ColumnsRow targetColumn in _targetTableColumns)
{   #>
        , @Deltaº<#= targetColumn.COLUMN_NAME #>
<#
}   #>  
        );
                
GO
