<#@ template language="C#" #>
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[<#= _params.AuditingSchema #>].[ReleaseTransactionSequence]') AND type IN (N'P', N'PC'))
    DROP PROCEDURE [<#= _params.AuditingSchema #>].[ReleaseTransactionSequence]
GO

CREATE PROCEDURE [<#= _params.AuditingSchema #>].[ReleaseTransactionSequence]
  @TransactionSequence BIGINT OUTPUT
, @Depth INT OUTPUT
AS
BEGIN
/*
    READ THIS BEFORE EDITING THIS CODE
    ----------------------------------
    This code was automatically generated by the
    CodeCharm.Model.AuditFramework
    project.
    
    If you modify this code, and then execute 
    the AuditFramework tool, your modifications
    will be ignored and overwritten.
    
    Template: CreateReleaseTransactionSequenceProcedure.tt
*/

    SET NOCOUNT ON;

    DECLARE @KillOldTransaction BIT;

	BEGIN TRY
	    BEGIN TRANSACTION;
	    SAVE TRANSACTION ReleaseTransactionSequence;

	    SET @KillOldTransaction = 0;

	    -- Make sure the transaction sequence exists for the current session and 
	    -- Make sure the depth of the transaction sequence is at or above zero
	    IF EXISTS(  SELECT      *
	                    FROM    [<#= _params.AuditingSchema #>].[SessionTransaction]
	                    WHERE   [SessionId] = @@SPID
	                        AND [Host_Name] = HOST_NAME()
	                        AND [App_Name] = APP_NAME()
	                        AND [Depth] >= 0
	                )
	    BEGIN
	        UPDATE  [<#= _params.AuditingSchema #>].[SessionTransaction]
	            SET [Depth] = [Depth] - 1
	            WHERE   [SessionId] = @@SPID;

	        SELECT    @TransactionSequence = [ActiveSequence]
	                , @Depth = [Depth]
	            FROM    [<#= _params.AuditingSchema #>].[SessionTransaction]
	            WHERE   SessionId = @@SPID;

	        IF @Depth <= 0
	            SET @KillOldTransaction = 1;
	    END;
	    ELSE
	    BEGIN
	        SET @KillOldTransaction = 1;
	    END;

	    -- Check whether we exhausted the depth of nested transaction sequences
	    -- and remove the record if we did
	    IF 1 = @KillOldTransaction
	    BEGIN
	        DELETE FROM [<#= _params.AuditingSchema #>].[SessionTransaction]
	            WHERE   [SessionId] = @@SPID;
	    END;

	    COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
	    DECLARE	  @ErrorMessage    NVARCHAR(4000)
			  	, @ErrorNumber     INT
				, @ErrorSeverity   INT
				, @ErrorState      INT
				, @ErrorLine       INT
				, @ErrorProcedure  NVARCHAR(200);

	    -- Assign variables to error-handling functions that 
	    -- capture information for RAISERROR.
	    SELECT	  @ErrorNumber = ERROR_NUMBER()
				, @ErrorSeverity = ERROR_SEVERITY()
				, @ErrorState = ERROR_STATE()
				, @ErrorLine = ERROR_LINE()
				, @ErrorProcedure = ISNULL(ERROR_PROCEDURE(), '-');

		IF XACT_STATE() = -1 -- uncommittable
		BEGIN
			ROLLBACK TRANSACTION ReleaseTransactionSequence;
		END;
		
		IF XACT_STATE() = 1 -- committable
		BEGIN
			COMMIT TRANSACTION;
		END;
		
	    -- Build the message string that will contain original
	    -- error information.
	    SELECT @ErrorMessage = N'Error %d, Level %d, State %d, Procedure %s, Line %d, Message: '+ ERROR_MESSAGE();
		
		IF @ErrorState = 0
			SET @ErrorState = 1;

	    -- Raise an error: msg_str parameter of RAISERROR will contain
	    -- the original error information.
	    RAISERROR 
	        (
	          @ErrorMessage 
	        , @ErrorSeverity 
	        , 1               
	        , @ErrorNumber    	-- parameter: original error number.
	        , @ErrorSeverity  	-- parameter: original error severity.
	        , @ErrorState     	-- parameter: original error state.
	        , @ErrorProcedure 	-- parameter: original error procedure name.
	        , @ErrorLine       	-- parameter: original error line number.
	        );
	END CATCH;
END
GO
