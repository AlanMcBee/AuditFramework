<#@ template language="C#" #>
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[<#= _params.AuditingSchema #>].[RequestTransactionSequence]') AND type IN (N'P', N'PC'))
    DROP PROCEDURE [<#= _params.AuditingSchema #>].[RequestTransactionSequence]
GO

CREATE PROCEDURE [<#= _params.AuditingSchema #>].[RequestTransactionSequence] 
  @UserName             SYSNAME
, @TransactionSequence  BIGINT  OUTPUT
, @Depth                INT     OUTPUT
AS
BEGIN
/*
    READ THIS BEFORE EDITING THIS CODE
    ----------------------------------
    This code was automatically generated by the
    CodeCharm.Model.AuditFramework
    project.
    
    If you modify this code, and then execute 
    the AuditFramework tool, your modifications
    will be ignored and overwritten.
    
    Template: CreateRequestTransactionSequenceProcedure.tt
*/

    SET NOCOUNT ON;

    DECLARE @StartNewTransaction BIT

	BEGIN TRY
	    BEGIN TRANSACTION;
	    SAVE TRANSACTION RequestTransactionSequence;

	    SET @StartNewTransaction = 0;

	    IF EXISTS(  SELECT      *
	                    FROM    [<#= _params.AuditingSchema #>].[SessionTransaction]
	                    WHERE   [SessionId] = @@SPID
	                        AND [Host_Name] = HOST_NAME()
	                        AND [App_Name] = APP_NAME()
	                )
	    BEGIN
	        UPDATE  [<#= _params.AuditingSchema #>].[SessionTransaction]
	            SET [Depth] = [Depth] + 1
	            WHERE   [SessionId] = @@SPID;

	        SELECT    @TransactionSequence = [ActiveSequence]
	                , @Depth = [Depth]
	            FROM    [<#= _params.AuditingSchema #>].[SessionTransaction]
	            WHERE   SessionId = @@SPID;
	    END;
	    ELSE
	    BEGIN
	        SET @StartNewTransaction = 1;
	    END;

	    IF 1 = @StartNewTransaction
	    BEGIN
	        INSERT INTO [<#= _params.AuditingSchema #>].[TransactionSequence]
	            DEFAULT VALUES;

	        SET @TransactionSequence = SCOPE_IDENTITY();

	        DELETE FROM [<#= _params.AuditingSchema #>].[TransactionSequence]
	            WHERE   [TransactionSequence] = @TransactionSequence;

	        DELETE FROM [<#= _params.AuditingSchema #>].[SessionTransaction]
	            WHERE   [SessionId] = @@SPID;

	        SET @Depth = 1;

	        INSERT INTO [<#= _params.AuditingSchema #>].[SessionTransaction]
	            (
	              [SessionId]
	            , [ActiveSequence]
	            , [Depth]
	            , [User_Name]
	            , [Host_Name]
	            , [App_Name]
	            , [LastUpdatedUtc]
	            )
	            VALUES
	            (
	              @@SPID
	            , @TransactionSequence
	            , @Depth
	            , @UserName
	            , HOST_NAME()
	            , APP_NAME()
	            , GETUTCDATE()
	            );

	    END;

	    COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
	    DECLARE	  @ErrorMessage    NVARCHAR(4000)
			  	, @ErrorNumber     INT
				, @ErrorSeverity   INT
				, @ErrorState      INT
				, @ErrorLine       INT
				, @ErrorProcedure  NVARCHAR(200);

	    -- Assign variables to error-handling functions that 
	    -- capture information for RAISERROR.
	    SELECT	  @ErrorNumber = ERROR_NUMBER()
				, @ErrorSeverity = ERROR_SEVERITY()
				, @ErrorState = ERROR_STATE()
				, @ErrorLine = ERROR_LINE()
				, @ErrorProcedure = ISNULL(ERROR_PROCEDURE(), '-');

		IF XACT_STATE() = -1 -- uncommittable
		BEGIN
			ROLLBACK TRANSACTION RequestTransactionSequence;
		END;
		
		IF XACT_STATE() = 1 -- committable
		BEGIN
			COMMIT TRANSACTION;
		END;
		
	    -- Build the message string that will contain original
	    -- error information.
	    SELECT @ErrorMessage = N'Error %d, Level %d, State %d, Procedure %s, Line %d, Message: '+ ERROR_MESSAGE();
		
		IF @ErrorState = 0
			SET @ErrorState = 1;

	    -- Raise an error: msg_str parameter of RAISERROR will contain
	    -- the original error information.
	    RAISERROR 
	        (
	          @ErrorMessage 
	        , @ErrorSeverity 
	        , 1               
	        , @ErrorNumber    	-- parameter: original error number.
	        , @ErrorSeverity  	-- parameter: original error severity.
	        , @ErrorState     	-- parameter: original error state.
	        , @ErrorProcedure 	-- parameter: original error procedure name.
	        , @ErrorLine       	-- parameter: original error line number.
	        );
	END CATCH;
END
GO
