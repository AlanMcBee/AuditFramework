<#@ template language="C#" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.EntityClient" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="CodeCharm.Data.AuditFramework" #>
<#@ import namespace="CodeCharm.Entity.AuditFramework" #>
<# 
EntityConnectionStringBuilder connectionStringBuilder = Generator.GetEntityConnectionStringBuilder(_params);
AuditFrameworkEntities context = new AuditFrameworkEntities(connectionStringBuilder.ToString());

SchemaDataSet schemaDataSet = _params.SchemaDataSet;
SchemaDataSet.SchemaPrimaryKeysDataTable primaryKeysTable = schemaDataSet.SchemaPrimaryKeys;
EnumerableRowCollection<SchemaDataSet.SchemaPrimaryKeysRow> primaryKeysRows = primaryKeysTable.AsEnumerable();
var primaryKeysQuery = from primaryKeysRow in primaryKeysRows
                       where primaryKeysRow.TABLE_SCHEMA.Equals(_schema, StringComparison.OrdinalIgnoreCase)
                       where primaryKeysRow.TABLE_NAME.Equals(_targetTableName, StringComparison.OrdinalIgnoreCase)
                       select primaryKeysRow;                   
#>
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[<#= _params.AuditingSchema #>].[Instantº<#= _schema #>º<#= _targetTableName #>]') AND type IN (N'P', N'PC'))
    DROP PROCEDURE [<#= _params.AuditingSchema #>].[Instantº<#= _schema #>º<#= _targetTableName #>];
GO

CREATE PROCEDURE [<#= _params.AuditingSchema #>].[Instantº<#= _schema #>º<#= _targetTableName #>]
  @AuditºTimestampUtc   [DATETIME]
, @TrackºId				[BIGINT] OUTPUT
<#
foreach(SchemaDataSet.SchemaPrimaryKeysRow primaryKeysRow in primaryKeysQuery)
{   #>
, @<#= primaryKeysRow.COLUMN_NAME #> <#= SchemaHelper.DataTypeWithDetail(primaryKeysRow, schemaDataSet.Columns) #>
<#
}   #>
AS

/*
    READ THIS BEFORE EDITING THIS CODE
    ----------------------------------
    This code was automatically generated by the
    CodeCharm.Model.AuditFramework
    project.
    
    If you modify this code, and then execute 
    the AuditFramework tool, your modifications
    will be ignored and overwritten.
    
    Template: CreateInstantTrackIdProcedure.tt
    
    REMARKS
    -------
    This procedure finds the most recent TrackId for the
    audited record which has the primary keys provided by
    the caller. If the action of the most recent audit was 
    a delete, go to the PriorTrackId of the found record 
    in order to get data that is meaningful.
*/

    SET NOCOUNT ON;

    -- Find the TrackId of the most recent track/delta record in the tracking table(s) that matches the primary key(s)
<#
if (schemaDataSet.SchemaTables.TableExists(_params.AuditingSchema, "Catalog"))
{   
    var priorVersionTrackingTableQuery = from catalog in context.Catalogs
                                         where catalog.AuditedSchema.Equals(_schema, StringComparison.OrdinalIgnoreCase)
                                         where catalog.AuditedTableName.Equals(_targetTableName, StringComparison.OrdinalIgnoreCase)
                                         orderby catalog.Version descending
                                         select catalog;
    foreach (Catalog catalog in priorVersionTrackingTableQuery)
    {   #>
    SELECT    TOP 1 
              @TrackºId = [M].[TrackºId]
        FROM    [<#= _params.AuditingSchema #>].[<#= new TrackingTable(catalog.AuditedSchema, catalog.AuditedTableName, catalog.Version).ToString() #>] AS [T]
            INNER JOIN  [<#= _params.AuditingSchema #>].[AuditMaster] AS [M]
                    ON  [M].[TrackºId] = [T].[TrackºId]
        WHERE   [M].[TimestampUtc] < @AuditºTimestampUtc
<#      foreach (SchemaDataSet.SchemaPrimaryKeysRow primaryKeysRow in primaryKeysQuery)
        {   #>
                AND [T].[<#= primaryKeysRow.COLUMN_NAME #>] = @<#= primaryKeysRow.COLUMN_NAME #>
<#      }   #>
        ORDER BY    [M].[TrackºId] DESC;

<#		if (catalog.Version > 0)
		{ #>
    IF @TrackºId IS NOT NULL
        RETURN; 
		
<#    	}
	}
}
else
{   #>
    SELECT    TOP 1 
              @TrackºId = [M].[TrackºId]
        FROM    [<#= _params.AuditingSchema #>].[<#= new TrackingTable(_schema, _targetTableName, 0).ToString() #>] AS [T]
            INNER JOIN  [<#= _params.AuditingSchema #>].[AuditMaster] AS [M]
                    ON  [M].[TrackºId] = [T].[TrackºId]
        WHERE   [M].[TimestampUtc] < @AuditºTimestampUtc
<#      foreach (SchemaDataSet.SchemaPrimaryKeysRow primaryKeysRow in primaryKeysQuery)
        {   #>
                AND [T].[<#= primaryKeysRow.COLUMN_NAME #>] = @<#= primaryKeysRow.COLUMN_NAME #>
<#      }   #>
        ORDER BY    [M].[TrackºId] DESC;
<#
}   #>

GO
